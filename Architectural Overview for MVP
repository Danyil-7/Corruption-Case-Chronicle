4. Architectural Overview for MVP
While the full architecture encompasses multiple layers and components, the MVP will focus on the following simplified structure:
4.1. Simplified System Architecture

graph TD
    subgraph Data Collection
        A[Manual Data Entry] --> B(Backend API)
        C[Partner API] --> B
    end

    subgraph Data Verification
        B --> D[Automated Checks]
        D --> E[Manual Review]
        E --> F[Database]
    end

    subgraph Data Storage
        F[PostgreSQL Database] --> G[Backend Services]
    end

    subgraph User Interface
        H[Web Application] --> G
    end

    subgraph Security
        I[Authentication] --> G
        J[Encryption] --> F
    end

    subgraph Analytics
        K[Google Analytics] --> H
    end


4.2. Description
Data Collection:


Data is ingested via manual entries from administrators or through APIs from one or two partner sources.
Data Verification:


Automated scripts perform initial data validation.
Designated data analysts manually review and approve data before it is stored.
Data Storage:


Verified data is stored in a PostgreSQL database, ensuring structured and reliable storage.
Backend Services:


Node.js with Express.js handles API requests, serves data to the frontend, and manages business logic.
User Interface:


A React.js-based web application allows users to search, filter, and view corruption cases.
Security:


Implement authentication using JWT to secure admin and data contributor access.
Ensure all data transmissions are encrypted using TLS/SSL, and sensitive data in the database is encrypted at rest.
Analytics:


Integrate Google Analytics to monitor user interactions and platform usage.

PSEUDO CODE (MVP):

Data Models:
PostgreSQL Schema:

-- Table: users
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('admin', 'data_analyst', 'user') DEFAULT 'user',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: corruption_cases
CREATE TABLE corruption_cases (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    country VARCHAR(100) NOT NULL,
    year INT NOT NULL,
    sector VARCHAR(100),
    submitted_by INT REFERENCES users(id),
    status ENUM('pending', 'approved', 'rejected') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: case_verifications
CREATE TABLE case_verifications (
    id SERIAL PRIMARY KEY,
    case_id INT REFERENCES corruption_cases(id),
    verified_by INT REFERENCES users(id),
    verification_status ENUM('approved', 'rejected'),
    comments TEXT,
    verified_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Backend APIs (Node.js along with Express.js)
Authentication
User Registration

function registerUser(username, email, password, role='user') {
    // Validate input data
    if (!validateUsername(username) || !validateEmail(email) || !validatePassword(password)) {
        return error("Invalid input data");
    }

    // Check if user already exists
    if (database.findUserByEmail(email) || database.findUserByUsername(username)) {
        return error("User already exists");
    }

    // Hash the password
    hashedPassword = hashPassword(password);

    // Create new user
    user = database.createUser({
        username: username,
        email: email,
        password_hash: hashedPassword,
        role: role
    });

    // Generate JWT token
    token = generateJWT(user.id, user.role);

    return success({ user: user, token: token });
}


User Login
	
function loginUser(email, password) {
    // Retrieve user by email
    user = database.findUserByEmail(email);
    if (!user) {
        return error("User not found");
    }

    // Verify password
    if (!verifyPassword(password, user.password_hash)) {
        return error("Incorrect password");
    }

    // Generate JWT token
    token = generateJWT(user.id, user.role);

    return success({ user: user, token: token });
}




